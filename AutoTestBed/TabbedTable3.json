{
  "name": "TabbedTable3",
  "type": "TabbedTable",
  "size": "Full row",
  "height": "2",
  "title": "comparision",
  "plugin": "",
  "static": false,
  "query": {
    "name": "query_TabbedTable3",
    "query_params": [
      {
        "select": [
          "R1_IOPS=rate",
          "R1_Throughput=MBPerSec",
          "R1_Latency=resp",
          "R1_R_Latency=readResp",
          "R1_W_Latency=writeResp",
          "R1_Max_Latency=respMax.max",
          "R1_Latency std_dev=respStd.avg",
          "R1_Time=timestamp.term"
        ],
        "where": "_tag_appName == AutoTestBed AND _plugin == hxatb AND _documentType == testRunRaw AND _tag_runId == DropDown10.$value AND _tag_runName == *"
      },
      {
        "select": [
          "R2_IOPS=rate",
          "R2_Throughput=MBPerSec",
          "R2_Latency=resp",
          "R2_R_Latency=readResp",
          "R2_W_Latency=writeResp",
          "R2_Max_Latency=respMax.max",
          "R2_Latency std_dev=respStd.avg",
          "R2_Time=timestamp.term"
        ],
        "where": "_tag_appName == AutoTestBed AND _plugin == hxatb AND _documentType == testRunRaw AND _tag_runId == DropDown27.$value AND _tag_runName == *"
      }
    ],
    "render": [
      "R1 against R2.Time=R1_Time ",
      "R1 against R2.IOPS=R1_IOPS",
      "R1 against R2.IOPS%=((R1_IOPS-R2_IOPS)/R2_IOPS)*100",
      "R1 against R2.Tput=R1_Throughput",
      "R1 against R2.Tput%=((R1_Throughput-R2_Throughput)/R2_Throughput)*100",
      "R1 against R2.Lat=R1_Latency",
      "R1 against R2.Lat%=((R1_Latency-R2_Latency)/R2_Latency)*100",
      "R1 against R2.R_Lat=R1_R_Latency",
      "R1 against R2.R_Lat%=((R1_R_Latency-R2_R_Latency)/R2_R_Latency)*100",
      "R1 against R2.W_Lat=R1_W_Latency",
      "R1 against R2.W_Lat%=((R1_W_Latency-R2_W_Latency)/R2_W_Latency)*100",
      "R1 against R2.Max_Lat=R1_Max_Latency",
      "R1 against R2.Max_Lat%=((R1_Max_Latency-R2_Max_Latency)/R2_Max_Latency)*100",
      "R1 against R2.Lat_std_dev= R1_Latency std_dev",
      "R1 against R2.Lat_std_dev%=((R1_Latency std_dev-R2_Latency std_dev)/R2_Latency std_dev)*100",
      "R2 against R1.Time=R2_Time",
      "R2 against R1.IOPS=R2_IOPS",
      "R2 against R1.IOPS%=((R2_IOPS-R1_IOPS)/R1_IOPS)*100",
      "R2 against R1.Tput=R2_Throughput",
      "R2 against R1.Tput%=((R2_Throughput-R1_Throughput)/R1_Throughput)*100",
      "R2 against R1.Lat=R2_Latency",
      "R2 against R1.Lat%=((R2_Latency-R1_Latency)/R1_Latency)*100",
      "R2 against R1.R_Lat=R2_R_Latency",
      "R2 against R1.R_Lat%=((R2_R_Latency-R1_R_Latency)/R1_R_Latency)*100",
      "R2 against R1.W_Lat=R2_W_Latency",
      "R2 against R1.W_Lat%=((R2_W_Latency-R1_W_Latency)/R1_W_Latency)*100",
      "R2 against R1.Max_Lat=R2_Max_Latency",
      "R2 against R1.Max_Lat%=((R2_Max_Latency-R1_Max_Latency)/R1_Max_Latency)*100",
      "R2 against R1.Lat_std_dev=R2_Latency std_dev",
      "R2 against R1.Lat_std_dev%=((R2_Latency std_dev-R1_Latency std_dev)/R1_Latency std_dev)*100"
    ],
    "aggregation": true,
    "from": "testbed_read",
    "time": "Last 1 month"
  },
  "sortable": true,
  "metricProperties": {
    "metricsFilter": {},
    "color": {
      "IOPS%": "Red(<-10), Green(>=10)",
      "Tput%": "Red(<-10), Green(>=10)",
      "Lat%": "Red(>=10), Green(<-10)",
      "R_Lat%": "Red(>=10), Green(<-10)",
      "W_Lat%": "Red(>=10), Green(<-10)",
      "Max_Lat%": "Red(>=10), Green(<-10)",
      "Lat_std_dev%": "Red(>=10), Green(<-10)"
    },
    "decimal": {
      "default": 2
    }
  }
}